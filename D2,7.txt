1.Создать двух пользователей (с помощью метода User.objects.create_user).
User.objects.create_user('Roman')
User.objects.create_user('Ilya')

2.Создать два объекта модели Author, связанные с пользователями.
Author.objects.create(authorUser = User.objects.get(username='Roman'))
Author.objects.create(authorUser = User.objects.get(username='Ilya'))

3.Добавить 4 категории в модель Category.
Category.objects.create(name = 'Python')
Category.objects.create(name = 'JavaScript')
Category.objects.create(name = 'Java')
Category.objects.create(name = 'Django')

4.Добавить 2 статьи и 1 новость.
Post.objects.create(author = Author.objects.get(authorUser = User.objects.get(username = 'Roman')), caregoryType = 'NW', title = 'Документация Django', text = 'Этот документ предоставляет справочные материалы по API для компонентов системы аутентификации Django. Дополнительные сведения об использовании этих компонентов или настройке проверки подлинности и авторизации см. В руководстве по темепроверки подлинности .')

Post.objects.create(author = Author.objects.get(authorUser = User.objects.get(username = 'Ilya')), caregoryType = 'NW', title = 'Получение данных из моделей', text = 'В предыдущих юнитах мы изучили полный процесс создания моделей — от проектирования их на концептуальном уровне, прошли через создание сущностей на SQL и дошли до создания классов моделей с различными полями, методами и свойствами. В этом, заключительном, юните мы научимся создавать объекты моделей, изменятьих, удалять, а также искать объекты в моделях.')

Post.objects.create(author = Author.objects.get(authorUser = User.objects.get(username = 'Ilya')), caregoryType = 'AR', title = 'Ноовост 1', text = 'Другой способ, олее каноничный для Django, заключается в применении менеджера модели. Каждая модель при наследовании от базового класса Model имеет в себе дополнительный объект, который позволяет различным образом управлять объектами модели. Этот объект имеет стандартное название objects. Использование его метода create() позволит одновременно создать объект и отправить его в базу данных.')

5.Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
c1 = Category.objects.get(name = 'Django')
с2 = Category.objects.get(name = 'JavaScript')
c3 = Category.objects.get(name = 'Java')
c4 = Category.objects.get(name = 'Python')

p1 = Post.objects.get(title = 'Документация Django')
p2 = Post.objects.get(title = 'Получение данных из моделей')
p3 = Post.objects.get(pk=3)

p1.postCategory.add(c1)
p2.postCategory.add(c1, с2, c3)
p3.postCategory.add(с2, c3)

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentPost = p1, commentUser = User.objects.get(username = 'Roman'), text = 'текст комментария 1')
Comment.objects.create(commentPost = p1, commentUser = User.objects.get(username = 'Roman'), text = 'Отличная статья')
Comment.objects.create(commentPost = p1, commentUser = User.objects.get(username = 'Roman'), text = 'Очень позновательная статья')
Comment.objects.create(commentPost = p2, commentUser = User.objects.get(username = 'Roman'), text = 'Отличная статья')
Comment.objects.create(commentPost = p2, commentUser = User.objects.get(username = 'Ilya'), text = 'Комментарий к статье 2')
Comment.objects.create(commentPost = p3, commentUser = User.objects.get(username = 'Ilya'), text = 'Комментарий к статье 3')
Comment.objects.create(commentPost = p3, commentUser = User.objects.get(username = 'Ilya'), text = 'Комментарий к статье 3 от Ильи')
Comment.objects.create(commentPost = p2, commentUser = User.objects.get(username = 'Ilya'), text = 'Комментарий к статье 2 от Ильи')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Post.objects.get(pk = 1).like()
Post.objects.get(pk = 2).dislike()
Post.objects.get(pk = 3).like()
Comment.objects.get(pk = 1).like()
Comment.objects.get(pk = 2).like()
Comment.objects.get(pk = 3).like()
Comment.objects.get(pk = 4).like()
Comment.objects.get(pk = 5).like()
Comment.objects.get(pk = 6).like()
Comment.objects.get(pk = 7).like()
Comment.objects.get(pk = 8).like()
Comment.objects.get(pk = 9).like()
Comment.objects.get(pk = 10).like()
Comment.objects.get(pk = 11).like()

8.Обновить рейтинги пользователей.
Author.objects.get(authorUser = User.objects.get(username='Roman')).update_rating()
Author.objects.get(authorUser = User.objects.get(username='Ilya')).update_rating()
Проверяем рейтинг
Author.objects.get(authorUser = User.objects.get(username='Roman')).ratingAuthor
Author.objects.get(authorUser = User.objects.get(username='Ilya')).ratingAuthor

9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
best = Author.objects.all().order_by('-ratingAuthor').values('authorUser', 'ratingAuthor')[0]
print(best)

10.Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

Выводим дату создания, рейтинг, заголовок лучшей статьи
print(Post.objects.all().order_by('-rating').values('dateCreation', 'rating', 'title')[0])

Определяем pk лучшей статьи
>>> bp = Post.objects.all().order_by('-rating').values('pk')[0]
>>> print(bp)

Выводим username лучшей статьи
print(Post.objects.get(pk=3).author.authorUser)

Выводим превью лучшей статьи
>>> print(Post.objects.get(pk=3).preview())

11.Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
print(Comment.objects.filter(commentPost = Post.objects.get(pk = 3)).values('dateCreation', 'commentUser', 'rating', 'text'))
# Имя пользователя не смог вывести, только его ID





























